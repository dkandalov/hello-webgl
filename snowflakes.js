// Generated by CoffeeScript 1.6.3
(function() {
  var ParticleSystem, Stage, animate, init, particles, stage, stats;

  if (!Detector.webgl) {
    Detector.addGetWebGLMessage();
  }

  stage = null;

  particles = [];

  stats = null;

  ParticleSystem = (function() {
    function ParticleSystem(index, config) {
      var amount, color, geometry, i, vertex, _i;
      this.index = index;
      this.config = config;
      amount = this.config[4];
      geometry = new THREE.Geometry();
      for (i = _i = 0; 0 <= amount ? _i < amount : _i > amount; i = 0 <= amount ? ++_i : --_i) {
        vertex = new THREE.Vector3();
        vertex.x = Math.random() * 2000 - 1000;
        vertex.y = Math.random() * 2000 - 1000;
        vertex.z = Math.random() * 2000 - 1000;
        geometry.vertices.push(vertex);
      }
      this.rotationSpeed = config[3];
      this.material = new THREE.ParticleBasicMaterial({
        size: config[2],
        map: THREE.ImageUtils.loadTexture(config[1]),
        blending: THREE.AdditiveBlending,
        depthTest: false,
        transparent: true,
        opacity: 0.8
      });
      color = config[0];
      this.material.color.setHSL(color[0], color[1], color[2]);
      this.particles = new THREE.ParticleSystem(geometry, this.material);
      this.particles.rotation.x = Math.random() * 6;
      this.particles.rotation.y = Math.random() * 6;
      this.particles.rotation.z = Math.random() * 6;
    }

    ParticleSystem.prototype.addTo = function(scene) {
      return scene.add(this.particles);
    };

    ParticleSystem.prototype.animate = function(time) {
      var color, h;
      time = time * 0.00005;
      this.particles.rotation.y = time * this.rotationSpeed;
      color = this.config[0];
      h = (360 * (color[0] + time) % 360) / 360;
      return this.material.color.setHSL(h, color[1], color[2]);
    };

    return ParticleSystem;

  })();

  Stage = (function() {
    function Stage() {
      this.camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 1, 2000);
      this.camera.position.z = 1000;
      this.scene = new THREE.Scene();
      this.scene.fog = new THREE.FogExp2(0x000000, 0.0012);
      this.renderer = new THREE.WebGLRenderer();
      this.renderer.setClearColor(0x000000, 1);
      this.renderer.setSize(window.innerWidth, window.innerHeight);
      this.mouseX = 0;
      this.mouseY = 0;
    }

    Stage.prototype.appendTo = function(container) {
      return container.appendChild(this.renderer.domElement);
    };

    Stage.prototype.onWindowSizeChange = function(window) {
      this.windowHalfX = window.innerWidth / 2;
      this.windowHalfY = window.innerHeight / 2;
      this.camera.aspect = window.innerWidth / window.innerHeight;
      this.camera.updateProjectionMatrix();
      return this.renderer.setSize(window.innerWidth, window.innerHeight);
    };

    Stage.prototype.onNewMousePosition = function(x, y) {
      this.mouseX = x - this.windowHalfX;
      return this.mouseY = y - this.windowHalfY;
    };

    Stage.prototype.render = function() {
      this.camera.position.x += (this.mouseX - this.camera.position.x) * 0.05;
      this.camera.position.y += (-this.mouseY - this.camera.position.y) * 0.05;
      this.camera.lookAt(this.scene.position);
      return this.renderer.render(this.scene, this.camera);
    };

    return Stage;

  })();

  init = function(showStats) {
    var i, onDocumentTouch, parameters, rootContainer, _fn, _i, _ref;
    if (showStats == null) {
      showStats = false;
    }
    rootContainer = document.createElement('div');
    document.body.appendChild(rootContainer);
    stage = new Stage();
    parameters = [[[1.0, 0.2, 0.5], "sprites/class.png", 20, 1.5, 6000], [[1.0, 0.2, 0.5], "sprites/abstractClass@2x.png", 20, 1.5, 1000], [[0.95, 0.1, 0.5], "sprites/method.png", 15, 2, 7000], [[0.90, 0.05, 0.5], "sprites/interface.png", 10, 2, 5000], [[0.85, 0, 0.5], "sprites/testError.png", 8, 4, 3000], [[0.60, 0, 0.5], "sprites/sourceFolder.png", 5, 3, 3000], [[0.60, 0, 0.5], "sprites/exceptionClass@2x.png", 5, 2, 3000], [[0.60, 0, 0.5], "sprites/error_notifications@2x.png", 15, 2, 3000], [[0.60, 0, 0.5], "sprites/debug@2x_dark.png", 15, 2, 1000], [[0.60, 0, 0.5], "sprites/warning@2x.png", 15, 2, 3000], [[0.60, 0, 0.5], "sprites/antInstallation@2x_dark.png", 10, 2, 300], [[0.60, 0, 0.4], "sprites/xsdFile@2x.png", 15, 0.4, 400], [[0.60, 0, 0.4], "sprites/ejbClass.png", 10, 1, 400], [[0.60, 0, 0.4], "sprites/ejb@2x.png", 10, 1, 400], [[0.60, 0, 0.4], "sprites/home.png", 10, 1, 400]];
    _fn = function() {
      var particleSystem;
      particleSystem = new ParticleSystem(i, parameters[i]);
      particleSystem.addTo(stage.scene);
      return particles.push(particleSystem);
    };
    for (i = _i = 0, _ref = parameters.length; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
      _fn();
    }
    if (showStats) {
      stats = new Stats();
      stats.domElement.style.position = 'absolute';
      stats.domElement.style.top = '0px';
      rootContainer.appendChild(stats.domElement);
    }
    stage.appendTo(rootContainer);
    stage.onWindowSizeChange(window);
    onDocumentTouch = function(event) {
      if (event.touches.length === 1) {
        event.preventDefault();
        return stage.onNewMousePosition(event.touches[0].pageX, event.touches[0].pageY);
      }
    };
    document.addEventListener('touchstart', onDocumentTouch, false);
    document.addEventListener('touchmove', onDocumentTouch, false);
    document.addEventListener('mousemove', (function(event) {
      return stage.onNewMousePosition(event.clientX, event.clientY);
    }), false);
    return window.addEventListener('resize', (function() {
      return stage.onWindowSizeChange(window);
    }), false);
  };

  animate = function() {
    var particleSystem, time, _i, _len;
    requestAnimationFrame(animate);
    time = Date.now();
    for (_i = 0, _len = particles.length; _i < _len; _i++) {
      particleSystem = particles[_i];
      particleSystem.animate(time);
    }
    stage.render();
    if (stats !== null) {
      return stats.update();
    }
  };

  init();

  animate();

}).call(this);

/*
//@ sourceMappingURL=snowflakes.map
*/
